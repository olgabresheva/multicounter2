{"version":3,"sources":["CountBtn.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["CountBtn","props","className","onClick","changeCount","Number","value","Counter","resetBtn","width","height","viewBox","fill","xmlns","fillRule","d","useState","count","setCount","n","App","counterList","setCounterList","updatedCounterList","push","pop","map","el","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MAkBeA,MAdf,SAAkBC,GAMd,OACI,8BACJ,4BAAQC,UAAU,mCAAmCC,QANnC,WACdF,EAAMG,YAAYC,OAAOJ,EAAMK,UAKuCL,EAAMK,SC6BrEC,MApCf,WAEI,IAAMC,EACF,yBAAKC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYT,UAAU,+BAA+BU,KAAK,eAC3FC,MAAM,8BACP,0BAAMC,SAAS,UACTC,EAAE,sHACR,0BAAMD,SAAS,UACTC,EAAE,+HARD,EAWWC,mBAAS,GAXpB,mBAWRC,EAXQ,KAWDC,EAXC,KAaTd,EAAc,SAACe,GACjBD,EAASD,EAAQE,IAOrB,OACI,8BACI,kBAAC,EAAD,CAAUb,MAAO,KAAMW,MAAOA,EAAOb,YAAaA,IAClD,kBAAC,EAAD,CAAUE,MAAO,KAAMW,MAAOA,EAAOb,YAAaA,IAClD,kBAAC,EAAD,CAAUE,MAAO,KAAMW,MAAOA,EAAOb,YAAaA,IAClD,0BAAMF,UAAU,SAASe,GACzB,kBAAC,EAAD,CAAUX,MAAO,KAAMW,MAAOA,EAAOb,YAAaA,IAClD,kBAAC,EAAD,CAAUE,MAAO,KAAMW,MAAOA,EAAOb,YAAaA,IAClD,kBAAC,EAAD,CAAUE,MAAO,KAAMW,MAAOA,EAAOb,YAAaA,IAClD,4BAAQF,UAAU,8BAA8BC,QAb1C,WACVe,EAAS,KAY4DV,KCe9DY,MA5Cf,WAEI,IAFW,EAI2BJ,mBAF1B,IAFD,mBAIJK,EAJI,KAISC,EAJT,KAkBX,OACI,yBAAKpB,UAAU,OAGX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,4BAAQA,UAAU,8BAA8BC,QAnBjD,WACf,IAAMoB,EAAkB,YAAOF,GAC/BE,EAAmBC,KAAK,kBAAC,EAAD,OACxBF,EAAeC,KAgBC,eACA,4BAAQrB,UAAU,mCAAmCC,QAdnD,WAClB,IAAMoB,EAAkB,YAAOF,GAC/BE,EAAmBE,MACnBH,EAAeC,KAWC,oBAIR,yBAAKrB,UAAU,OACX,yBAAKA,UAAU,wBACVmB,EAAYK,KAAI,SAACC,EAAIC,GAAL,OAAe,wBAAIC,IAAKD,GAAQD,WC1BrDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6c36a310.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction CountBtn(props) {\n\n    const sendValue = () => {\n        props.changeCount(Number(props.value));\n    }\n\n    return (\n        <span>\n    <button className=\"btn btn-outline-secondary btn-sm\" onClick={sendValue}>{props.value}</button>\n        </span>\n\n    );\n}\n\nexport default CountBtn;\n","import React, {useState} from 'react';\nimport './App.css';\nimport CountBtn from \"./CountBtn\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction Counter() {\n\n    const resetBtn = (\n        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-arrow-counterclockwise\" fill=\"currentColor\"\n             xmlns=\"http://www.w3.org/2000/svg\">\n            <path fillRule=\"evenodd\"\n                  d=\"M12.83 6.706a5 5 0 0 0-7.103-3.16.5.5 0 1 1-.454-.892A6 6 0 1 1 2.545 5.5a.5.5 0 1 1 .91.417 5 5 0 1 0 9.375.789z\"/>\n            <path fillRule=\"evenodd\"\n                  d=\"M7.854.146a.5.5 0 0 0-.708 0l-2.5 2.5a.5.5 0 0 0 0 .708l2.5 2.5a.5.5 0 1 0 .708-.708L5.707 3 7.854.854a.5.5 0 0 0 0-.708z\"/>\n        </svg>);\n\n    const [count, setCount] = useState(0);\n\n    const changeCount = (n) => {\n        setCount(count + n);\n    }\n\n    const reset = () => {\n        setCount(0);\n    }\n\n    return (\n        <span>\n            <CountBtn value={'-1'} count={count} changeCount={changeCount}/>\n            <CountBtn value={'-2'} count={count} changeCount={changeCount}/>\n            <CountBtn value={'-3'} count={count} changeCount={changeCount}/>\n            <span className=\"count\">{count}</span>\n            <CountBtn value={'+3'} count={count} changeCount={changeCount}/>\n            <CountBtn value={'+2'} count={count} changeCount={changeCount}/>\n            <CountBtn value={'+1'} count={count} changeCount={changeCount}/>\n            <button className=\"btn btn-outline-info btn-sm\" onClick={reset}>{resetBtn}</button>\n        </span>\n\n    );\n}\n\nexport default Counter;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from \"./Counter\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n\n    const arr = [];\n\n    const [counterList, setCounterList] = useState(arr);\n\n    const addCounter = () => {\n        const updatedCounterList = [...counterList];\n        updatedCounterList.push(<Counter/>);\n        setCounterList(updatedCounterList);\n    }\n\n    const deleteCounter = () => {\n        const updatedCounterList = [...counterList];\n        updatedCounterList.pop();\n        setCounterList(updatedCounterList);\n    }\n\n    return (\n        <div className=\"App\">\n\n\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <button className=\"btn btn-outline-info btn-sm\" onClick={addCounter}>Add Counter</button>\n                        <button className=\"btn btn-outline-secondary btn-sm\" onClick={deleteCounter}>Delete Counter\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-lg-6 offset-lg-3\">\n                        {counterList.map((el, index) => <li key={index}>{el}\n                        </li>)}\n                    </div>\n                </div>\n\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}